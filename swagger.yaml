swagger: "2.0"
info:
  description: "Rest endpoints for the control subsystem."
  version: "0.0.1"
  title: "Control Subsystem"
host: "localhost:8080"
basePath: "/rs"
tags:
- name: "street"
  description: "Get some map data"
- name: "path"
  description: "Creation of paths"
schemes:
- "https"
- "http"
paths:
  /street/name/{streetName}:
    get:
      tags:
      - "street"
      summary: "Find street by Name"
      operationId: "getStreetByName"
      produces:
      - "application/json"
      parameters:
      - name: "streetName"
        in: "path"
        description: "Name of the street that needs to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Street"
  
  /street/{streetID}:
    get:
      tags:
      - "street"
      summary: "Find street by ID"
      operationId: "getStreetByID"
      produces:
      - "application/json"
      parameters:
      - name: "streetID"
        in: "path"
        description: "ID of the street that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Street"
  /street/{streetID}/neighbors:
    get:
      tags:
      - "street"
      summary: "Find all neighbors of a street"
      operationId: "getNeighborsForStreet"
      produces:
      - "application/json"
      parameters:
      - name: "streetID"
        in: "path"
        description: "ID of the street that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Street"
  /path/maintenance:
    post:
      tags:
      - "path"
      summary: "Create a maintenance path"
      operationId: "createMaintenancePath"
      consumes: 
      - "application/json"
      produces: 
      - "application/json"
      parameters: 
      - in: "body"
        name: "obj"
        required: true
        schema:
          type: "object"
          properties:
            startDate:
              type: "string"
              format: "date-time"
            endDate:
              type: "string"
              format: "date-time"
            streets:
              type: "array"
              items:
                type: "string"
      responses:
        201:
          description: "created"
          schema:
            $ref: "#/definitions/MaintenancePath"
  /path/blocked:
    post:
      tags:
      - "path"
      summary: "Create a blocked path"
      operationId: "createBlockedPath"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "obj"
        required: true
        schema:
          type: "object"
          properties:
            startDate:
              type: "string"
              format: "date-time"
            blockadeType:
              type: "string"
              enum: 
              - "TrafficJam"
              - "Emergency"
            priority:
              type: "string"
              enum: 
              - "Highest"
              - "High"
              - "Normal"
              - "Low"
              - "Lowest"
            streets:
              type: "array"
              items:
                type: "string"
      responses:
        201:
          description: "created"
          schema:
            $ref: "#/definitions/BlockedPath"
  /path/shortest:
    get:
      tags: 
      - "path"
      summary:  "Get the shortest path from point A to point B"
      operationId: "getShortestPath"
      produces:
      - "application/json"
      parameters:
      - name: "from"
        in: "query"
        description: "Name of the street where it should start"
        required: true
        type: "string"
      - name: "to"
        in: "query"
        description: "Name of the street where it should end"
        required: true
        type: "string"
      - name: "avoidance"
        in: "query"
        description: "If it should avoid paths"
        type: "boolean"
        default: false
      - name: "priority"
        in: "query"
        description: "Priority to avoid paths"
        type: "string"
        enum: 
        - "Highest"
        - "High"
        - "Normal"
        - "Low"
        - "Lowest"
        default: "Lowest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ShortestPath"
        400:
          description: "Couldn't find a shortest path for the given values."
    
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Street:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      length:
        type: "integer"
        format: "int64"
  Direction:
    type: "object"
    properties:
      street:
        $ref: "#/definitions/Street"
      direction:
        $ref: "#/definitions/Direction"
  BlockedPath:
    type: "object"
    properties:
      start:
        $ref: "#/definitions/Direction"
      end:
        $ref: "#/definitions/Direction"
      blockadeStart:
        type: "string"
        format: "date-time"
      blockadeType:
        type: "string"
        enum: 
        - "TrafficJam"
        - "Emergency"
      priorityToAvoid:
        type: "string"
        enum: 
        - "Highest"
        - "High"
        - "Normal"
        - "Low"
        - "Lowest"
  MaintenancePath:
    type: "object"
    properties:
      start:
        $ref: "#/definitions/Direction"
      end:
        $ref: "#/definitions/Direction"
      blockadeStart:
        type: "string"
        format: "date-time"
      blockadeType:
        type: "string"
        default: "Maintenance"
      maintenanceFinish:
        type: "string"
        format: "date-time"
      priorityToAvoid:
        type: "string"
        enum: 
        - "Highest"
        - "High"
        - "Normal"
        - "Low"
        - "Lowest"
      maintenanceFinished:
        type: "boolean"
        default: false
  ShortestPath:
    type: "object"
    properties:
      start:
        $ref: "#/definitions/Direction"
      end:
        $ref: "#/definitions/Direction"
      totalLenght:
        type: "integer"
        format: "int32"